import 'dart:convert';
import 'dart:async'; // Import dart:async for Timer
import 'package:flutter/material.dart';
import 'package:project_new/HomeNavbar/concert_detail.dart';
import 'package:project_new/HomeNavbar/concert_enjoy.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';
// import 'concert_detail.dart'; // Import the ConcertDetail widget
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';

class Profile extends StatefulWidget {
  const Profile({super.key});

  @override
  State<Profile> createState() => _ProfileState();
}

class _ProfileState extends State<Profile> {
  final PageController _controller = PageController();
  Timer? _timer;
  String selectedType = 'CONCERT';
  int favoriteCount = 0;
  int selectedIndex = 0; // Store the selected index
  String selectedCategory = 'ทั้งหมด'; // Track the selected category
  List<dynamic> _ProductImages = [];
  List<dynamic> _concerts = [];
  List<dynamic> _concertsThaimass = [];
  bool _isLoading = true;

  // Define the items for each category

  @override
  void initState() {
    super.initState();
    _startAutoScroll();
    fetchProductImages();
    fetchConcerts();
    fetchConcertsThaimass();
    _controller.addListener(_onPageChanged);
  }
 List<Widget> _buildConcertCategories() {
    return [
      _buildCircularImageWithText('assets/shop.png', 'Flash Sales'),
      _buildCircularImageWithText('assets/key5.jpg', 'Shirt'),
      _buildCircularImageWithText('assets/bts6.jpg', 'Light Stick'),
      _buildCircularImageWithText('assets/order9.jpg', 'Album'),
    ];
  }

  List<Widget> _buildSportCategories() {
    return [
      _buildCircularImageWithText('assets/sport1.jpg', 'FlashSp'),
      _buildCircularImageWithText('assets/sport2.jpg', 'ShirtSp'),
      _buildCircularImageWithText('assets/sport3.jpg', 'Scarf'),
      _buildCircularImageWithText('assets/sports4.jpg', 'Shoes'),
    ];
  }

  Future<void> fetchProductImages() async {
    try {
      final response =
          await http.get(Uri.parse('http://192.168.55.228:5000/getAllProduct'));
      if (response.statusCode == 200) {
        setState(() {
          _ProductImages = jsonDecode(response.body);
          _isLoading = false;
        });
      } else {
        print('Failed to load concerts: ${response.statusCode}');
      }
    } catch (e) {
      print('Error fetching concerts: $e');
    }
  }

  var categoryItems = {
    'ทั้งหมด': [],
    'THAI MASS': [],
    'T-POP': [],
    'K-POP': [],
    'INTERNATIONAL': [],
  };

  Future<void> fetchConcerts() async {
    try {
      final response = await http
          .get(Uri.parse('http://192.168.55.228:5000/getAllConcerts'));
      if (response.statusCode == 200) {
        List<dynamic> concerts = jsonDecode(response.body);

        // แปลงข้อมูลจาก API ให้อยู่ในรูปแบบ categoryItems
        Map<String, List<Map<String, String>>> updatedCategories = {
          'ทั้งหมด': [],
          'THAI MASS': [],
          'T-POP': [],
          'K-POP': [],
          'INTERNATIONAL': [],
        };

        for (var concert in concerts) {
          String category = concert['category'] ?? 'ทั้งหมด';
          if (!updatedCategories.containsKey(category)) {
            updatedCategories[category] = [];
          }

          updatedCategories[category]!.add({
            'imagePath': concert['image'] ?? 'assets/default.jpg',
            'text1': concert['name'] ?? 'Unknown Concert',
            'text2': concert['date'] ?? 'Unknown Date',
            'text3': concert['time'] ?? 'Unknown Time',
            'text4': concert['location'] ?? 'Unknown Location',
            'text5': concert['price'] ?? 'N/A', // เพิ่มราคาที่รับจาก API
            'boxColor': '0xFFFFFFFF',
            'textColor': '0xFF000000',
          });
        }

        setState(() {
          // รวมข้อมูลของ API นี้เข้ากับ categoryItems เดิม
          categoryItems.forEach((key, value) {
            if (updatedCategories.containsKey(key)) {
              categoryItems[key]!.addAll(updatedCategories[key]!);
            }
          });
          _concerts = concerts;
          _isLoading = false;
        });
      } else {
        print('Failed to load concerts: ${response.statusCode}');
      }
    } catch (e) {
      print('Error fetching concerts: $e');
    }
  }

  Future<void> fetchConcertsThaimass() async {
    try {
      final response = await http
          .get(Uri.parse('http://192.168.55.228:5000/getAllConcertsthaiMass'));
      if (response.statusCode == 200) {
        List<dynamic> concerts = jsonDecode(response.body);

        // แปลงข้อมูลจาก API ให้อยู่ในรูปแบบ categoryItems
        Map<String, List<Map<String, String>>> updatedCategories = {
          'ทั้งหมด': [],
          'THAI MASS': [],
          'T-POP': [],
          'K-POP': [],
          'INTERNATIONAL': [],
        };

        for (var concert in concerts) {
          String category = concert['category'] ?? 'THAI MASS';
          if (!updatedCategories.containsKey(category)) {
            updatedCategories[category] = [];
          }

          updatedCategories[category]!.add({
            'imagePath': concert['image'] ?? 'assets/default.jpg',
            'text1': concert['name'] ?? 'Unknown Concert',
            'text2': concert['date'] ?? 'Unknown Date',
            'text3': concert['time'] ?? 'Unknown Time',
            'text4': concert['location'] ?? 'Unknown Location',
            'text5': concert['price'] ?? 'N/A',
            'boxColor': '0xFFFFFFFF',
            'textColor': '0xFF000000',
          });
        }

        setState(() {
          // รวมข้อมูลของ API นี้เข้ากับ categoryItems เดิม
          categoryItems.forEach((key, value) {
            if (updatedCategories.containsKey(key)) {
              categoryItems[key]!.addAll(updatedCategories[key]!);
            }
          });
          _concertsThaimass = concerts;
          _isLoading = false;
        });
      } else {
        print('Failed to load concerts: ${response.statusCode}');
      }
    } catch (e) {
      print('Error fetching concerts: $e');
    }
  }

  @override
  void dispose() {
    _timer?.cancel();
    _controller.removeListener(_onPageChanged);
    super.dispose();
  }

  void _startAutoScroll() {
    _timer = Timer.periodic(Duration(seconds: 3), (timer) {
      if (_controller.hasClients) {
        final nextPage = (_controller.page!.toInt() + 1) % 10;
        _controller.animateToPage(
          nextPage,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeInOut,
        );
      }
    });
  }

  void _onPageChanged() {
    final page = _controller.page?.round() ?? 0;
    if (page == 3) {
      _controller.animateToPage(
        0,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Background Gradient
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFFEECDA3), Color(0xFFEF629F)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),
          // Page Content
          Padding(
            padding: const EdgeInsets.only(top: 10.0),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween, 
                      crossAxisAlignment: CrossAxisAlignment.center, 
                      children: [
                        Column(
                          crossAxisAlignment:
                              CrossAxisAlignment.start,
                          children: [
                            Text(
                              "ʙᴇꜱᴛ ᴘʀᴏᴅᴜᴄᴛꜱ",
                              style: TextStyle(
                                color: Color.fromARGB(255, 251, 64, 204),
                                fontSize: 25,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Stack(
                              children: [
                                Icon(Icons.favorite,
                                    color: Colors.pink[50], size: 28),
                                if (favoriteCount >
                                    0) // แสดงเฉพาะเมื่อ favoriteCount > 0
                                  Positioned(
                                    right: -50,
                                    top: 0,
                                    child: Container(
                                      padding: EdgeInsets.all(4),
                                      decoration: BoxDecoration(
                                        color: Colors.red,
                                        shape: BoxShape.circle,
                                      ),
                                      child: Text(
                                        '$favoriteCount',
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                  ),
                              ],
                            ),
                            SizedBox(width: 8),
                            Icon(Icons.shopping_cart,
                                color: Colors.white, size: 28),
                          ],
                        ),
                      ],
                    ),
                  ),

                  const SizedBox(height: 20),
                  // Search Bar
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: Container(
                      height: 50.0,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(25.0),
                        color: Colors.white,
                      ),
                      child: TextField(
                        decoration: InputDecoration(
                          filled: true,
                          fillColor: Colors.white,
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(25.0),
                            borderSide: BorderSide.none,
                          ),
                          hintText: 'Search ...',
                          hintStyle: TextStyle(
                            color: Colors.black54,
                          ),
                          prefixIcon: Icon(Icons.search, color: Colors.black),
                          contentPadding: EdgeInsets.symmetric(
                              vertical: 12.0, horizontal: 16.0),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  // Content Box with Carousel
                  Container(
                    child: Column(
                      children: [
                        Container(
                          height: 220,
                          child: PageView(
                            controller: _controller,
                            children: _ProductImages.map((ProductImages) {
                              return buildCarouselItem(
                                ProductImages['image'] ?? 'assets/default.jpg',
                              );
                            }).toList(),
                          ),
                        ),
                        SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _buildTypeButton(
                        'CONCERT', const Color.fromARGB(255, 243, 33, 163)),
                    SizedBox(width: 40),
                    _buildTypeButton(
                        'SPORT', const Color.fromARGB(255, 76, 127, 175)),
                  ],
                ),
                Padding(
                  padding: const EdgeInsets.all(18.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: selectedType == 'CONCERT'
                        ? _buildConcertCategories()
                        : _buildSportCategories(),
                  ),
                ),
               
                        SizedBox(height: 30),
                        Container(
                          child: SingleChildScrollView(
                            scrollDirection: Axis.horizontal,
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                             
                            ),
                          ),
                        ),
                        const SizedBox(height: 20),
                        // Content List
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16.0),
                          child: Column(
                            children: (_isLoading
                                    ? [] // ถ้ายังโหลดข้อมูลอยู่ ให้แสดงเป็นค่าว่าง
                                    : categoryItems[selectedCategory] ??
                                        []) // ใช้ข้อมูลจาก selectedCategory
                                .map((item) => buildImageWithTextAndBox(
                                    item)) // แปลงแต่ละ item เป็น widget
                                .toList(),
                          ),
                        ),
                        const SizedBox(height: 20),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

    Widget _buildCircularImageWithText(String imagePath, String category) {
    return GestureDetector(
      onTap: () {
        setState(() {
          selectedCategory = category;
        });
      },
      child: Column(
        children: [
          CircleAvatar(
            radius: 33,
            backgroundImage: AssetImage(imagePath),
          ),
          const SizedBox(height: 8),
          Text(
            category,
            style: TextStyle(
              fontSize: 16,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }


  Widget _buildTypeButton(String type, Color color) {
    return GestureDetector(
      onTap: () {
        setState(() {
          selectedType = type;
          selectedCategory = 'Flash Sales';
        });
      },
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 12, horizontal: 30),
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(20),
        ),
        child: Text(
          type,
          style: TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }


  Widget buildCarouselItem(String imagePath) {
    String imageUrl = 'http://192.168.55.228/product/$imagePath';

    return Container(
      margin: const EdgeInsets.all(8.0),
      decoration: BoxDecoration(
        image: DecorationImage(
          image: imageUrl.startsWith('http')
              ? NetworkImage(imageUrl) // ถ้าเป็น URL ใช้ NetworkImage
              : AssetImage(imageUrl)
                  as ImageProvider, // ถ้าไม่ใช่ URL ใช้ AssetImage
          fit: BoxFit.cover,
        ),
        borderRadius: BorderRadius.circular(15.0),
      ),
    );
  }

  Widget buildImageWithTextAndBox(Map<String, String> item) {
    // กำหนด URL ของรูปภาพ

    String imageUrl = 'http://192.168.55.228/concert/all/' + item['imagePath']!;

    return GestureDetector(
      child: Container(
        margin: const EdgeInsets.only(bottom: 16.0),
        padding: const EdgeInsets.all(8.0),
        decoration: BoxDecoration(
          color: Color(int.parse(item['boxColor']!)),
          borderRadius: BorderRadius.circular(10.0),
        ),
        child: Row(
          children: [
            // ใช้ Image.network แทน NetworkImage
            ClipRRect(
              borderRadius: BorderRadius.circular(15),
              child: Container(
                width: 100,
                height: 140,
                child: Image.network(
                  imageUrl,
                  fit: BoxFit.cover,
                  loadingBuilder: (context, child, loadingProgress) {
                    if (loadingProgress == null) {
                      return child; // ถ้าภาพโหลดเสร็จแล้ว ให้แสดงภาพเลย
                    } else {
                      // ถ้ายังโหลดไม่เสร็จ ให้แสดง CircularProgressIndicator
                      return Center(
                        child: CircularProgressIndicator(
                          value: loadingProgress.expectedTotalBytes != null
                              ? loadingProgress.cumulativeBytesLoaded /
                                  (loadingProgress.expectedTotalBytes ?? 1)
                              : null,
                        ),
                      );
                    }
                  },
                ),
              ),
            ),
            const SizedBox(width: 8.0),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    item['text1']!, // ชื่อคอนเสิร์ต
                    style: TextStyle(
                      color: Color(int.parse(item['textColor']!)),
                      fontWeight: FontWeight.bold,
                      fontSize: 20,
                    ),
                  ),
                  Row(
                    children: [
                      Icon(Icons.timer_sharp, size: 16, color: Colors.blue),
                      SizedBox(width: 4),
                      Text(
                        item['text3']!, // วัน
                        style: TextStyle(
                          color: Color(int.parse(item['textColor']!)),
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),

                  Row(
                    children: [
                      Icon(Icons.push_pin, size: 16, color: Colors.red),
                      SizedBox(width: 4),
                      Expanded(
                        // ใช้ Expanded เพื่อให้ข้อความยืดออกไปได้
                        child: Text(
                          item['text4']!, // สถานที่
                          style: TextStyle(
                            color: Color(int.parse(item['textColor']!)),
                            fontSize: 16,
                          ),
                          softWrap:
                              true, // จะทำให้ข้อความขึ้นบรรทัดใหม่ถ้ายาวเกิน
                        ),
                      ),
                    ],
                  ),

                  SizedBox(height: 8),
                  // Add the 'Buy Tickets' button
                  ElevatedButton(
                    onPressed: () {
                      // ตรวจสอบค่า
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (context) => ConcertDetail(
                            imagePath: imageUrl, // เปลี่ยนเป็น URL เต็ม
                            text1: item['text1']!,
                            text2: item['text2']!,
                            text3: item['text3']!,
                            text4: item['text4']!,
                            text5: item['text5'] ?? 'ไม่มีข้อมูล',
                          ),
                        ),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color.fromARGB(255, 255, 29, 13),
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                      padding:
                          EdgeInsets.symmetric(vertical: 5.0, horizontal: 25.0),
                    ),
                    child: Text(
                      'ซื้อบัตร',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
