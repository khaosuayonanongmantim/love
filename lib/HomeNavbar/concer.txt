import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:project_new/HomeNavbar/ZoneDetailPage.dart';

class ConcertPlan extends StatefulWidget {
  final String imagePath;
  final String concertName;
  final String date;
  final String time;
  final String location;
  final String price;

  const ConcertPlan({
    Key? key,
    required this.imagePath,
    required this.concertName,
    required this.date,
    required this.time,
    required this.location,
    required this.price,
  }) : super(key: key);

  @override
  State<ConcertPlan> createState() => _ConcertPlanState();
}

class _ConcertPlanState extends State<ConcertPlan> {
  late Timer _timer;
  int _remainingTime = 300; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
  String selectedPrice = "‡∏ø2,500"; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  String selectedZone = "STD"; // ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  List<String> seatZones = ['STD']; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  List<String> seatPrices = [];
  List<dynamic> _zones = [];
  bool _isLoading = true;

@override
void initState() {
  super.initState();
  fetchZones("6"); // ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô concert_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  startTimer();
}


Future<void> fetchZones(String concertID) async {
  try {
    final response = await http.get(Uri.parse(
        'http://192.168.55.228:5000/getZones?concert_id=$concertID'));

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      print("üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API: $data"); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÑ‡∏´‡∏°

      setState(() {
        _zones = data;
        _isLoading = false;
      });
    } else {
      throw Exception('Failed to load zones');
    }
  } catch (e) {
    print('‚ùå Error fetching zones: $e');
  }
}


  // Future<void> fetchZones() async {
  //   try {
  //     final response = await http
  //         .get(Uri.parse('http://192.168.55.228:5000/?concert_id=${concertID.id}'));
  //     if (response.statusCode == 200) {
  //       setState(() {
  //         _zones = jsonDecode(response.body);
  //         _isLoading = false;
  //       });
  //     } else {
  //       print('Failed to load concerts: ${response.statusCode}');
  //     }
  //   } catch (e) {
  //     print('Error fetching concerts: $e');
  //   }
  // }

  @override
  void dispose() {
    _timer.cancel(); 
    super.dispose();
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô
  Map<String, Color> zoneColors = {
    'STD': Colors.pinkAccent,
  };

  void startTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_remainingTime > 0) {
        setState(() {
          _remainingTime--;
        });
      } else {
        _timer.cancel();
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'),
            content: const Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
              ),
            ],
          ),
        );
      }
    });
  }

  String formatTime(int seconds) {
    final int minutes = seconds ~/ 60;
    final int secs = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${secs.toString().padLeft(2, '0')}';
  }

  void updatePrice(String price) {
    setState(() {
      selectedPrice = price;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
      if (price == "‡∏ø3,500") {
        seatZones = ['BB1', 'BB2', 'BB3', 'BB4', 'BB5', 'BB6'];
      } else if (price == "‡∏ø5,500") {
        seatZones = ['AA1', 'AA2', 'AA3'];
      } else if (price == "‡∏ø4,500") {
        seatZones = ['AA4', 'AA5', 'AA6'];
      } else if (price == "‡∏ø2,500") {
        seatZones = ['STD'];
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ seatPrices ‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö seatZones
      seatPrices = List.generate(seatZones.length, (index) => price);
    });
  }

  void _bookSeat(String zone) {
    setState(() {
      selectedZone = zone;
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô ‡∏à‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ZoneDetailPage(
          zoneName: zone,
          selectedPrice: selectedPrice,
          imagePath: widget.imagePath,
          concertName: widget.concertName,
          date: widget.date,
          time: widget.time,
          location: widget.location,
        ),
      ),
    );
  }

  Widget buildPriceButton(String price, Color color) {
    return GestureDetector(
      onTap: () {
        updatePrice(price);
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
        decoration: BoxDecoration(
          color: selectedPrice == price ? color : Colors.grey[300],
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: Colors.black, width: 1),
        ),
        child: Text(
          price,
          style: TextStyle(
            color: selectedPrice == price ? Colors.white : Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

Widget buildSeatContainers() {
  return Column(
    children: _zones.map((zone) {
      // print("üéüÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô: $zone"); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô
      
      String zoneName = zone['name'] ?? 'Unknown'; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      String seatCount = zone['seat_count']?.toString() ?? 'N/A';
      Color zoneColor = zoneColors[zoneName] ?? Colors.grey; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏µ null

      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 10.0),
        child: Container(
          width: 360,
          height: 80,
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
          decoration: BoxDecoration(
            color: zoneColor,
            borderRadius: BorderRadius.circular(15),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.5),
                blurRadius: 7,
                offset: const Offset(0, 3),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    zoneName,
                    style: const TextStyle(
                      fontSize: 16,
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    "‡∏ø$seatCount",
                    style: const TextStyle(
                      fontSize: 16,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
              ElevatedButton(
                onPressed: () {
                  _bookSeat(zoneName);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(20),
                  ),
                ),
                child: const Text(
                  "‡∏à‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á",
                  style: TextStyle(
                    color: Colors.black,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    }).toList(),
  );
}

@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á'),
    ),
    body: Container(
      width: double.infinity,
      height: double.infinity, // ‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      color: Colors.white, // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // Timer
            Text(
              "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${formatTime(_remainingTime)}",
              style: const TextStyle(
                color: Colors.red,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),

            // Stage
            Container(
              height: 50,
              width: 250,
              alignment: Alignment.center,
              decoration: BoxDecoration(
                color: Colors.pinkAccent,
                border: Border.all(color: Colors.white, width: 2),
              ),
              child: const Text(
                "STAGE",
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),

            const SizedBox(height: 20),

            // ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
            buildZoneRow(['AA1', 'AA2', 'AA3'], Colors.pinkAccent, Colors.white),
            const SizedBox(height: 10),
            buildZoneRow(['AA4', 'AA5', 'AA6'], Colors.yellow, Colors.black),
            const SizedBox(height: 10),
            buildZoneRow(['BB1', 'BB2', 'BB3', 'BB4', 'BB5', 'BB6'],
                Colors.lightBlueAccent, Colors.black),

            const SizedBox(height: 20),

            // STD Zone
            Container(
              height: 40,
              width: double.infinity,
              alignment: Alignment.center,
              decoration: BoxDecoration(
                color: Colors.blue,
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Text(
                "STD",
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 10),

            // ‡πÅ‡∏™‡∏î‡∏á Loading Indicator ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
           _isLoading
  ? const CircularProgressIndicator() // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
  : buildSeatContainers(), // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ã‡∏ô

          ],
        ),
      ),
    ),
  );
}
}


Widget buildZoneRow(List<String> zones, Color color, Color textColor) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.center,
    children: zones
        .map(
          (zone) => Padding(
            padding: const EdgeInsets.symmetric(horizontal: 4.0),
            child: GestureDetector(
              onTap: () {
                debugPrint("Selected Zone: $zone");
              },
              child: Container(
                width: 50,
                height: 50,
                alignment: Alignment.center,
                decoration: BoxDecoration(
                  color: color,
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(color: Colors.black, width: 1),
                ),
                child: Text(
                  zone,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: textColor,
                  ),
                ),
              ),
            ),
          ),
        )
        .toList(),
  );
}
